#include <iostream>

using namespace std;

// Function to perform the insertion sort
void insertion_sort(int* arr, int low, int n){
	for (int i = low + 1; i < n + 1; i++){
		int val = arr[i];
		int j = i;
		while (j > low && arr[j - 1] > val){
			arr[j] = arr[j - 1];
			j -= 1;
		}
		arr[j] = val;
	}
}

// Partition function for quicksort

int partition(int* arr, int low, int high)
{
	int pivot = arr[high];
	int i, j;
	i = low;
	j = low;

	for (int i = low; i < high; i++){
		if (arr[i] < pivot){
			int temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
			j += 1;
		}
	}

	int temp = arr[j];
	arr[j] = arr[high];
	arr[high] = temp;

	return j;
}


// Function to call the partition function
// and perform quick sort on the array

void quick_sort(int arr[], int low, int high){
	if (low < high){
		int pivot = partition(arr, low, high);
		quick_sort(arr, low, pivot - 1);
		quick_sort(arr, pivot + 1, high);
	}
}

// Hybrid function -> Quick + Insertion sort

void hybrid_quick_sort(int arr[], int low, int high)
{
	while (low < high){
		if (high - low + 1 < 10){
			insertion_sort(arr, low, high);
			break;
		}
		else{
			int pivot = partition(arr, low, high);

			if (pivot - low < high - pivot){
				hybrid_quick_sort(arr, low, pivot - 1);
				low = pivot + 1;
			}
			else{
				hybrid_quick_sort(arr, pivot + 1, high);
				high = pivot - 1;
			}
		}
	}
}

int main()
{
	int row;
	std::cin >> row;

	int* array = new int[row];
	for (int i = 0; i < row; i++)
		array[i] = rand() % 50;

	for (int i = 0; i < row; i++)
		printf("%4d", array[i]);
	std::cout << "\n";

	hybrid_quick_sort(array, 0, row - 1);

	for (int i = 0; i < row; i++)
		printf("%4d", array[i]);

	delete[] array;
	return 0;
}

